//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**

     - parameter name: (form)  
     - parameter fileName: (form)  
     - parameter image: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addLiquor(name: String, fileName: String, image: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addLiquorWithRequestBuilder(name: name, fileName: fileName, image: image).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /liquor
     - 

     - parameter name: (form)  
     - parameter fileName: (form)  
     - parameter image: (form)  

     - returns: RequestBuilder<Void> 
     */
    open class func addLiquorWithRequestBuilder(name: String, fileName: String, image: String) -> RequestBuilder<Void> {
        let path = "/liquor"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "name": name,
                "fileName": fileName,
                "image": image
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLiquors(completion: @escaping ((_ data: [GetLiquorResponseParams]?,_ error: Error?) -> Void)) {
        getLiquorsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /liquor
     - 

     - examples: [{contentType=application/json, example=[ {
  "ImageFilePath" : "LiquorImage/example.png",
  "ID" : "0",
  "UpdatedAt" : "2000-01-23",
  "Name" : "beer"
}, {
  "ImageFilePath" : "LiquorImage/example.png",
  "ID" : "0",
  "UpdatedAt" : "2000-01-23",
  "Name" : "beer"
} ]}]

     - returns: RequestBuilder<[GetLiquorResponseParams]> 
     */
    open class func getLiquorsWithRequestBuilder() -> RequestBuilder<[GetLiquorResponseParams]> {
        let path = "/liquor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GetLiquorResponseParams]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter fileName: (path) image file name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func liquorImageFileNameGet(fileName: String, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        liquorImageFileNameGetWithRequestBuilder(fileName: fileName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /LiquorImage/{fileName}
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter fileName: (path) image file name 

     - returns: RequestBuilder<Data> 
     */
    open class func liquorImageFileNameGetWithRequestBuilder(fileName: String) -> RequestBuilder<Data> {
        var path = "/LiquorImage/{fileName}"
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
